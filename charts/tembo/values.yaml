# Default values for Tembo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Set affinity, nodeSelector or tolerations for all Postgres pods. More information at
# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
postgresPodScheduling:
  affinity: {}
  nodeSelector: {}
  tolerations: []

conductor:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: true
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  serviceMonitors:
    coredb:
      enabled: false

  image:
    repository: quay.io/tembo/conductor
    tag: "9644499"
    pullPolicy: IfNotPresent

  # We should reconfigure the defaults
  # once we have more information about this
  # workload in practice.
  resources:
    limits:
      cpu: 1
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  imagePullSecrets: []
  nameOverride: conductor
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env: []

tembo-operator:
  # -- The controller configuration
  controller:
    enabled: true
    nameOverride:
    namespaceOverride:

    # -- The log level to set inside the tembo-controller, default is info
    logLevel: info

    # -- The number of replicas to set for the tembo-controller
    replicas: 1

    rbac:
      # -- Specifies whether ClusterRole and ClusterRoleBinding should be created.
      create: true

    # -- The default image for the controller
    image:
      repository: quay.io/tembo/tembo-operator
      pullPolicy: Always
      # -- Overrides the image tag whose default is latest
      tag: "9644499"

    crds:
      # -- Specifies whether the CRDs should be created when installing the chart.
      create: true

    monitoring:
      # -- Specifies whether the monitoring should be enabled. Requires Prometheus Operator CRDs.
      prometheusRule:
        enabled: false
      # -- Specifies whether to enable the PodMonitor.  Requires Prometheus Operator CRDs
      podMonitor:
        enabled: false
        port: http
        path: /metrics

    # -- Set default env values currently used by the controller.
    env:
      # -- ENABLE_BACKUP will enable backups to object store (S3)
      - name: ENABLE_BACKUP
        value: "false"
      # -- ENABLE_VOLUME_SNAPSHOT enables the use of external-snapshotter controller.  Requires VolumeSnapshot and VolumeSnapshotContent CRDs from external-snapshotter.
      - name: ENABLE_VOLUME_SNAPSHOT
        value: "false"

    extraEnv: []

    # -- Annotations to be added to the deployment
    annotations: {}

    # -- Annotations to be added to the pod.
    podAnnotations: {}

    resources: {}
    # If you want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    #
    # limits:
    #   cpu: 1000m
    #   memory: 256Mi
    # requests:
    #   cpu: 250m
    #   memory: 100Mi

    # -- Deployment upgradeStrategy configuration
    upgradeStrategy: RollingUpdate

    # -- Service configuraton
    service:
      type: "ClusterIP"
      port: 80
      targetPort: 8080
      annotations: {}

    # -- ReadinessProbe configuration
    readinessProbe:
      httpGet:
        path: /health
        port: http
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 5

    # -- LivenessProbe configuration
    livenessProbe: {}

    # -- Nodeselector for the controller to be installed.
    nodeSelector: {}

    # -- Tolerations for the controller to be installed.
    tolerations: []

    # -- Affinity for the controller to be installed.
    affinity: {}

  # -- The pod-init configuration
  pod-init:
    enabled: true
    nameOverride:
    namespaceOverride:

    # -- The log level to set inside the tembo-controller, default is info
    logLevel: info

    # -- The number of replicas to set for the tembo-controller
    replicas: 1

    rbac:
      # -- Specifies whether ClusterRole and ClusterRoleBinding should be created.
      create: true

    # -- The default image for the pod-init deployment
    image:
      repository: quay.io/tembo/tembo-pod-init
      pullPolicy: IfNotPresent
      # -- Overrides the image tag whose default is latest
      tag: "9644499"

    extraEnv: []

    # -- Namespace Selector Label confguration
    namespaceSelector:
      # -- Labels to match namespaces for the Mutating Webhook configuation
      matchLabels:
        tembo-pod-init.tembo.io/watch: "true"

    # -- Annotations to be added to the deployment
    annotations: {}

    # -- Annotations to be added to the pod
    podAnnotations: {}

    resources: {}
    # If you want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    #
    # limits:
    #   cpu: 1000m
    #   memory: 256Mi
    # requests:
    #   cpu: 250m
    #   memory: 100Mi

    # -- Deployment upgradeStrategy configuration
    upgradeStrategy: RollingUpdate

    # -- Service configuraton
    service:
      type: "ClusterIP"
      port: 443
      targetPort: 8443
      annotations: {}

    # -- LivenessProbe configuration
    livenessProbe:
      httpGet:
        path: /health/liveness
        port: 8443
        scheme: HTTPS
      initialDelaySeconds: 15

    # -- ReadinessProbe configuration
    readinessProbe:
      httpGet:
        path: /health/readiness
        port: 8443
        scheme: HTTPS
      failureThreshold: 3
      timeoutSeconds: 15
      periodSeconds: 15

    # -- Nodeselector for the deployment to be installed.
    nodeSelector: {}

    # -- Tolerations for the deployment to be installed.
    tolerations: []

    # -- Affinity for the deployment to be installed.
    affinity: {}

  # -- Cloudnative-PG configuration
  cloudnative-pg:
    enabled: true
    config:
      create: true
      data:
        # -- INHERITED_ANNOTATIONS needs to match what is set in pod-init namespaceSelector.matchLabels
        INHERITED_ANNOTATIONS: "tembo-pod-init.tembo.io/*, tembo.io/*"
    monitoring:
      podMonitorEnabled: false
    service:
      type: ClusterIP

cpService:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: false
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  image:
    repository: quay.io/coredb/cp-service
    tag: "release-24.2.1"
    pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 1
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  service:
    type: ClusterIP
    port: 80

  imagePullSecrets: []
  nameOverride: cp-service
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: SERVICE_NAME
      value: cp-service
    - name: RUN_RECONCILE
      value: 'false'
    - name: RUN_REPORTER
      value: 'true'
    - name: POSTGRES_CONNECTION
      valueFrom:
        secretKeyRef:
          name: control-plane-connection
          key: rw_uri
    - name: POSTGRES_QUEUE_CONNECTION
      valueFrom:
        secretKeyRef:
          name: control-plane-queue-connection
          key: rw_uri

cpWebserver:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: false
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  image:
    repository: quay.io/coredb/cp-service
    tag: "release-24.2.1"
    pullPolicy: IfNotPresent

  # We should reconfigure the defaults
  # once we have more information about this
  # workload in practice.
  resources:
    limits:
      cpu: 1
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  service:
    type: ClusterIP
    port: 80

  imagePullSecrets: []
  nameOverride: cp-webserver
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: CLERK_SECRET_KEY
      value: ~
    - name: CLERK_WEBHOOK_SIGNING_SECRET
      value: ~
    - name: STRIPE_SECRET_KEY
      value: ~
    - name: STRIPE_WEBHOOK_SIGNING_SECRET
      value: ~
    - name: METRONOME_SECRET_KEY
      value: ~

cpReconciler:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: false
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  image:
    repository: quay.io/coredb/cp-service
    tag: "release-24.2.1"
    pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 1
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  service:
    type: ClusterIP
    port: 80

  imagePullSecrets: []
  nameOverride: cp-reconciler
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: SERVICE_NAME
      value: cp-reconciler
    - name: RECONCILE_INTERVAL_SEC
      value: '120'
    - name: RUN_RECONCILE
      value: 'true'
    - name: RUN_REPORTER
      value: 'false'
    - name: POSTGRES_CONNECTION
      valueFrom:
        secretKeyRef:
          name: control-plane-connection
          key: rw_uri
    - name: POSTGRES_QUEUE_CONNECTION
      valueFrom:
        secretKeyRef:
          name: control-plane-queue-connection
          key: rw_uri

cpMetricsWatcher:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: false
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  image:
    repository: quay.io/coredb/cp-service
    tag: "release-24.2.1"
    pullPolicy: IfNotPresent

  resources:
    limits:
      cpu: 1
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  service:
    type: ClusterIP
    port: 80

  imagePullSecrets: []
  nameOverride: cp-metrics-watcher
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env:
    - name: SERVICE_NAME
      value: cp-metrics-watcher
    - name: RUN_RECONCILE
      value: 'false'
    - name: RUN_REPORTER
      value: 'false'
    - name: RUN_METRONOME_REPORTER
      value: 'false'
    - name: RUN_METRICS_WATCHER
      value: 'true'
    - name: MAX_CONN_POOL_SIZE
      value: '10'
    - name: POSTGRES_CONNECTION
      valueFrom:
        secretKeyRef:
          name: control-plane-connection
          key: rw_uri
    - name: POSTGRES_QUEUE_CONNECTION
      valueFrom:
        secretKeyRef:
          name: control-plane-queue-connection
          key: rw_uri

dataplaneWebserver:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: false
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  image:
    repository: quay.io/tembo/dataplane-webserver
    tag: "9644499"
    pullPolicy: IfNotPresent

  # We should reconfigure the defaults
  # once we have more information about this
  # workload in practice.
  resources:
    limits:
      cpu: 1
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  service:
    type: ClusterIP
    port: 80

  imagePullSecrets: []
  nameOverride: dataplane-webserver
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env: {}

temboUI:
  logLevel: info

  replicas: 1

  podMonitor:
    enabled: false
    port: http
    path: /metrics

  externalSecrets:
    refreshInterval: "5m"
    parameterStore:
      name: "secret-store-parameter-store"
      kind: ClusterSecretStore
    secretName: ~
    secretRegex: ~

  image:
    repository: quay.io/tembo/mahout-ui
    tag: bd5b732
    pullPolicy: IfNotPresent

  # We should reconfigure the defaults
  # once we have more information about this
  # workload in practice.
  resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

  serviceAccount:
    create: true
    annotations: {}
    # Defaults to match name of deployment,
    # when this is set to empty string.
    name: ""

  service:
    type: ClusterIP
    port: 3000

  imagePullSecrets: []
  nameOverride: tembo-ui
  fullnameOverride: ""
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  env: []
